# Pilih kolom numerik untuk dihitung z-score
numerical_columns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Fungsi untuk Min-Max Normalization
min_max_normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Terapkan normalisasi
normalized_data <- as.data.frame(lapply(numerical_columns, min_max_normalize))
# Gabungkan dengan Student_ID
data_with_normalized <- cbind(dataStudent[, "Student_ID", drop = FALSE], normalized_data)
View(data_with_normalized)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Uji Kolmogorov-Smirnov untuk satu sampel (menguji distribusi normal)
ks_test_result_GPA <- ks.test(dataStudent$GPA, "pnorm", mean = mean(dataStudent$GPA), sd = sd(dataStudent$GPA))
# Menampilkan hasil uji
print(ks_test_result_GPA)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Hitung z-score untuk kolom numerik
z_scores <- scale(numerical_columns)
# Gabungkan hasil z-score dengan kolom lainnya (opsional)
data_with_z_scores <- cbind(dataStudent[, c("Student_ID")], as.data.frame(z_scores))
# Uji Kolmogorov-Smirnov untuk satu sampel (menguji distribusi normal)
ks_test_result_GPA <- ks.test(data_with_z_scorest$GPA, "pnorm", mean = mean(data_with_z_scores$GPA), sd = sd(data_with_z_scores$GPA))
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Hitung z-score untuk kolom numerik
z_scores <- scale(numerical_columns)
# Gabungkan hasil z-score dengan kolom lainnya (opsional)
data_with_z_scores <- cbind(dataStudent[, c("Student_ID")], as.data.frame(z_scores))
# Uji Kolmogorov-Smirnov untuk satu sampel (menguji distribusi normal)
ks_test_result_GPA <- ks.test(data_with_z_scores$GPA, "pnorm", mean = mean(data_with_z_scores$GPA), sd = sd(data_with_z_scores$GPA))
# Menampilkan hasil uji
print(ks_test_result_GPA)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numerical_columns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Uji Kolmogorov-Smirnov untuk satu sampel (menguji distribusi normal)
ks_test_result_GPA <- ks.test(dataStudent$GPA, "pnorm", mean = mean(dataStudent$GPA), sd = sd(dataStudent$GPA))
# Menampilkan hasil uji
print(ks_test_result_GPA)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Fungsi untuk Min-Max Normalization
min_max_normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Terapkan normalisasi
normalizedData <- as.data.frame(lapply(numericalColumns, min_max_normalize))
# Gabungkan dengan Student_ID
dataWithNormalized <- cbind(dataStudent[, "Student_ID", drop = FALSE], normalizedData)
View(dataWithNormalized)
# Load required library
library(ggplot2)
library(readr)
# Read the dataset
data <- read_csv("student_lifestyle_dataset.csv")
# Create the boxplot with boundaries for x and y axes
ggplot(data, aes(x = Stress_Level, y = Social_Hours_Per_Day, fill = Stress_Level)) +
geom_boxplot() +
labs(title = "Distribution of Social Hours Based on Stress Level",
x = "Stress Level",
y = "Social Hours per Day (hrs)") +
scale_fill_manual(values = c("Low" = "#2ca02c", "Moderate" = "#ffcc00", "High" = "#d62728")) +  # Colors for categories
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
axis.line = element_line(color = "black", size = 1),  # Add black border line for x and y axes
legend.position = "none"  # Remove legend
)
# Calculate Q1, Median, Q3, Max, and Min for Social Hours per Day by Stress Level
summary_stats <- data %>%
group_by(Stress_Level) %>%
summarise(
Q1 = quantile(Social_Hours_Per_Day, 0.25),
Median = median(Social_Hours_Per_Day),
Q3 = quantile(Social_Hours_Per_Day, 0.75),
Max = max(Social_Hours_Per_Day),
Min = min(Social_Hours_Per_Day)
)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Melakukan Uji Kolmogorov-Smirnov untuk setiap kolom numerik
ks_results <- lapply(numericalColumns, function(col) {
ks_test <- ks.test(col, "pnorm", mean = mean(col, na.rm = TRUE), sd = sd(col, na.rm = TRUE))
return(ks_test)
})
# Menampilkan hasil uji untuk setiap kolom
names(ks_results) <- colnames(numericalColumns)
print(ks_results)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Melakukan Uji Kolmogorov-Smirnov untuk setiap kolom numerik
ks_results <- lapply(numericalColumns, function(col) {
ks_test <- ks.test(col, "pnorm", mean = mean(col, na.rm = TRUE), sd = sd(col, na.rm = TRUE))
return(ks_test)
})
# Menampilkan hasil uji untuk setiap kolom
names(ks_results) <- colnames(numericalColumns)
View(ks_results)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Melakukan Uji Kolmogorov-Smirnov untuk setiap kolom numerik
ks_results <- lapply(numericalColumns, function(col) {
ks_test <- ks.test(col, "pnorm", mean = mean(col, na.rm = TRUE), sd = sd(col, na.rm = TRUE))
return(ks_test)
})
# Menampilkan hasil uji untuk setiap kolom
names(ks_results) <- colnames(numericalColumns)
print(ks_results)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Fungsi untuk Min-Max Normalization
minMaxNormalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Terapkan normalisasi
normalizedData <- as.data.frame(lapply(numericalColumns, minMaxNormalize))
# Gabungkan dengan Student_ID
dataWithNormalized <- cbind(dataStudent[, "Student_ID", drop = FALSE], normalizedData)
View(dataWithNormalized)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Hitung z-score untuk kolom numerik
zScores <- scale(numericalColumns)
# Gabungkan hasil z-score dengan kolom lainnya (opsional)
dataWithZScores <- cbind(dataStudent[, c("Student_ID")], as.data.frame(zScores))
# Tampilkan hasil
View(dataWithZScores)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Melakukan Uji Kolmogorov-Smirnov untuk setiap kolom numerik
ks_results <- lapply(numericalColumns, function(col) {
ks_test <- ks.test(col, "pnorm", mean = mean(col, na.rm = TRUE), sd = sd(col, na.rm = TRUE))
return(ks_test)
})
# Menampilkan hasil uji untuk setiap kolom
names(ks_results) <- colnames(numericalColumns)
print(ks_results)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Membuat tabel hasil KS test
ks_results_table <- data.frame(
Variable = names(ks_results),
D_Statistic = sapply(ks_results, function(test) test$statistic),
P_Value = sapply(ks_results, function(test) test$p.value)
)
# Menampilkan tabel
print(ks_results_table)
# View tabel dalam mode spreadsheet
View(ks_results_table)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Fungsi untuk Min-Max Normalization
minMaxNormalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Terapkan normalisasi
normalizedData <- as.data.frame(lapply(numericalColumns, minMaxNormalize))
# Gabungkan dengan Student_ID
dataWithNormalized <- cbind(dataStudent[, "Student_ID", drop = FALSE], normalizedData)
View(dataWithNormalized)
head(data_with_normalized)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Hitung z-score untuk kolom numerik
zScores <- scale(numericalColumns)
# Gabungkan hasil z-score dengan kolom lainnya (opsional)
dataWithZScores <- cbind(dataStudent[, c("Student_ID")], as.data.frame(zScores))
# Tampilkan hasil
View(dataWithZScores)
head(dataWithZScores)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day",
"Physical_Activity_Hours_Per_Day", "GPA", "Stress_Level")]
# Membuat tabel hasil KS test
ks_results_table <- data.frame(
Variable = names(ks_results),
D_Statistic = sapply(ks_results, function(test) test$statistic),
P_Value = sapply(ks_results, function(test) test$p.value)
)
# Menampilkan tabel
print(ks_results_table)
# View tabel dalam mode spreadsheet
View(ks_results_table)
# Menggunakan library
library(readr)
library(ggplot2)
# Membaca dataset
dataStudent <- read_csv("student_lifestyle_dataset.csv")
# Mengubah Stress_Level menjadi angka
dataStudent$Stress_Level <- as.numeric(factor(dataStudent$Stress_Level,
levels = c("Low", "Moderate", "High")))
# Pilih kolom numerik untuk dihitung z-score
numericalColumns <- dataStudent[, c("Study_Hours_Per_Day", "Extracurricular_Hours_Per_Day",
"Sleep_Hours_Per_Day", "Social_Hours_Per_Day")]
# Normalisasi kolom numerik menggunakan z-score
dataZScore <- as.data.frame(scale(numericalColumns))
# Pilih kolom yang akan divisualisasikan (contoh: "Study_Hours_Per_Day")
selectedColumn <- "Study_Hours_Per_Day"
# Membuat histogram dengan overlay distribusi normal
ggplot(dataZScore, aes_string(x = selectedColumn)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5, fill = "blue", alpha = 0.5) +
stat_function(fun = dnorm,
args = list(mean = mean(dataZScore[[selectedColumn]], na.rm = TRUE),
sd = sd(dataZScore[[selectedColumn]], na.rm = TRUE)),
color = "red", size = 1) +
labs(title = paste("Distribusi Normal untuk", selectedColumn),
x = selectedColumn, y = "Density") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Load the dataset
data <- read.csv("student_lifestyle_dataset.csv")
# Create the scatter plot
ggplot(data, aes(x = Study_Hours_Per_Day, y = GPA, color = Stress_Level)) +
geom_point(size = 3) +
labs(
title = "Scatter Plot of Study Hours vs GPA",
x = "Study Hours Per Day",
y = "GPA",
color = "Stress Level"
) +
theme_minimal()
# Load necessary libraries
library(ggplot2)
# Load the dataset
data <- read.csv("student_lifestyle_dataset.csv")
# Create the scatter plot
ggplot(data, aes(x = Study_Hours_Per_Day, y = GPA)) +
geom_point(size = 3, color = "blue") +
labs(
title = "Scatter Plot of Study Hours vs GPA",
x = "Study Hours Per Day",
y = "GPA"
) +
theme_minimal()
# Load necessary libraries
library(GGally)
# Load necessary libraries
library(ggplot2)
# Load the dataset
data <- read.csv("student_lifestyle_dataset.csv")
# Get all column names
columns <- colnames(data)
# Generate scatter plots for all variable pairs
for (i in 1:(length(columns) - 1)) {
for (j in (i + 1):length(columns)) {
x_col <- columns[i]
y_col <- columns[j]
# Create scatter plot
p <- ggplot(data, aes_string(x = x_col, y = y_col)) +
geom_point(size = 3, color = "blue", alpha = 0.7) +
labs(
title = paste("Scatter Plot of", x_col, "vs", y_col),
x = x_col,
y = y_col
) +
theme_minimal()
# Print the plot
print(p)
}
}
# Load necessary libraries
library(ggplot2)
# Load the dataset
data <- read.csv("student_lifestyle_dataset.csv")
# Define variable pairs
variable_pairs <- list(
"Study_Hours_Per_Day" = "Study Hours vs GPA",
"Sleep_Hours_Per_Day" = "Sleep Hours vs GPA",
"Extracurricular_Hours_Per_Day" = "Extracurricular Hours vs GPA",
"Social_Hours_Per_Day" = "Social Hours vs GPA",
"Physical_Activity_Hours_Per_Day" = "Physical Activity Hours vs GPA"
)
# Generate scatter plots
for (var in names(variable_pairs)) {
p <- ggplot(data, aes_string(x = var, y = "GPA")) +
geom_point(size = 3, color = "blue", alpha = 0.7) +
labs(
title = paste(variable_pairs[[var]]),
x = var,
y = "GPA"
) +
theme_minimal()
# Print the plot
print(p)
}
# Load necessary library
library(ggplot2)
# Load the dataset
data <- read.csv("student_lifestyle_dataset.csv")
# List of variable pairs
variable_pairs <- list(
"Study_Hours_Per_Day" = "Study Hours vs GPA",
"Extracurricular_Hours_Per_Day" = "Extracurricular Hours vs GPA",
"Sleep_Hours_Per_Day" = "Sleep Hours vs GPA",
"Social_Hours_Per_Day" = "Social Hours vs GPA",
"Physical_Activity_Hours_Per_Day" = "Physical Activity Hours vs GPA"
)
# Generate scatter plots
for (var in names(variable_pairs)) {
p <- ggplot(data, aes_string(x = var, y = "GPA")) +
geom_point(size = 3, color = "blue", alpha = 0.7) +
labs(
title = paste(variable_pairs[[var]]),
x = var,
y = "GPA"
) +
theme_minimal()
# Print the plot
print(p)
}
# Load necessary library
library(ggplot2)
# Load the dataset
data <- read.csv("student_lifestyle_dataset.csv")
# List of variable pairs
variable_pairs <- list(
"Study_Hours_Per_Day" = "Study Hours vs GPA",
"Extracurricular_Hours_Per_Day" = "Extracurricular Hours vs GPA",
"Sleep_Hours_Per_Day" = "Sleep Hours vs GPA",
"Social_Hours_Per_Day" = "Social Hours vs GPA",
"Physical_Activity_Hours_Per_Day" = "Physical Activity Hours vs GPA"
)
# Generate scatter plots
for (var in names(variable_pairs)) {
p <- ggplot(data, aes_string(x = var, y = "GPA")) +
geom_point(size = 3, color = "blue", alpha = 0.7) + # Scatter points
geom_hline(yintercept = mean(data$GPA, na.rm = TRUE),
color = "red", linetype = "dashed", linewidth = 0.8) + # Horizontal line at GPA mean
geom_vline(xintercept = mean(data[[var]], na.rm = TRUE),
color = "green", linetype = "dashed", linewidth = 0.8) + # Vertical line at predictor mean
labs(
title = paste(variable_pairs[[var]]),
x = var,
y = "GPA"
) +
theme_minimal(base_size = 14) + # Clean theme with larger font
theme(
plot.title = element_text(hjust = 0.5, face = "bold"), # Centered and bold title
axis.text = element_text(color = "black"),
axis.title = element_text(face = "bold")
)
# Print the plot
print(p)
}
# Load necessary library
library(ggplot2)
# Load the dataset
data <- read.csv("student_lifestyle_dataset.csv")
# List of variable pairs
variable_pairs <- list(
"Study_Hours_Per_Day" = "Study Hours vs GPA",
"Extracurricular_Hours_Per_Day" = "Extracurricular Hours vs GPA",
"Sleep_Hours_Per_Day" = "Sleep Hours vs GPA",
"Social_Hours_Per_Day" = "Social Hours vs GPA",
"Physical_Activity_Hours_Per_Day" = "Physical Activity Hours vs GPA"
)
# Generate scatter plots
for (var in names(variable_pairs)) {
p <- ggplot(data, aes_string(x = var, y = "GPA")) +
geom_point(size = 3, color = "blue", alpha = 0.7) +
labs(
title = paste(variable_pairs[[var]]),
x = var,
y = "GPA"
) +
theme_minimal()
# Print the plot
print(p)
}
